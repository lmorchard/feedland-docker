services:
  mysql:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-feedland_root}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-feedland}
      MYSQL_USER: ${MYSQL_USER:-feedland}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-feedland}
    ports:
      - "${MYSQL_PORT:-3306}:3306"
    volumes:
      - ./data/mysql:/var/lib/mysql:Z
      - ./feedlandInstall-main/docs/setup.sql:/setup.sql:Z
      - ./docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d:Z
    command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-feedland}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-feedland123}
    ports:
      - "${MINIO_API_PORT:-9000}:9000"
      - "${MINIO_CONSOLE_PORT:-9001}:9001"
    volumes:
      - ./data/minio:/data:Z
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  mailhog:
    image: mailhog/mailhog:latest
    ports:
      - "${MAILHOG_SMTP_PORT:-1025}:1025"
      - "${MAILHOG_WEB_PORT:-8025}:8025"

  minio-init:
    image: minio/mc:latest
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      mc alias set myminio http://minio:9000 ${MINIO_ROOT_USER:-feedland} ${MINIO_ROOT_PASSWORD:-feedland123};
      mc mb myminio/feedland --ignore-existing;
      mc anonymous set download myminio/feedland;
      echo 'Minio bucket setup complete';
      "

  feedland:
    build: .
    ports:
      - "${FEEDLAND_PORT:-1452}:1452"
      - "${FEEDLAND_WEBSOCKET_PORT:-1462}:1462"
    volumes:
      - ./config.json:/app/config.json:Z
    depends_on:
      mysql:
        condition: service_healthy
      minio:
        condition: service_healthy
      minio-init:
        condition: service_completed_successfully
      mailhog:
        condition: service_started
    environment:
      NODE_ENV: ${NODE_ENV:-development}
    restart: unless-stopped
